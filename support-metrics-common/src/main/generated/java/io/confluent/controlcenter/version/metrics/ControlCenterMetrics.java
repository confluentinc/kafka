/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.controlcenter.version.metrics;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information used to report anonymous data about Control Center usage. */
@org.apache.avro.specific.AvroGenerated
public class ControlCenterMetrics extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2213870813943790978L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ControlCenterMetrics\",\"namespace\":\"io.confluent.controlcenter.version.metrics\",\"doc\":\"Information used to report anonymous data about Control Center usage.\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Time when this data record was created.\"},{\"name\":\"confluentPlatformVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The version of the Confluent Platform.\"},{\"name\":\"clusterId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The cluster we are running on.\"},{\"name\":\"controlCenterInstance\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ID of Control Center.\"},{\"name\":\"session\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"UUID for each start.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ControlCenterMetrics> ENCODER =
      new BinaryMessageEncoder<ControlCenterMetrics>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ControlCenterMetrics> DECODER =
      new BinaryMessageDecoder<ControlCenterMetrics>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ControlCenterMetrics> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ControlCenterMetrics> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ControlCenterMetrics> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ControlCenterMetrics>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ControlCenterMetrics to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ControlCenterMetrics from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ControlCenterMetrics instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ControlCenterMetrics fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Time when this data record was created. */
  @Deprecated public long timestamp;
  /** The version of the Confluent Platform. */
  @Deprecated public java.lang.String confluentPlatformVersion;
  /** The cluster we are running on. */
  @Deprecated public java.lang.String clusterId;
  /** ID of Control Center. */
  @Deprecated public java.lang.String controlCenterInstance;
  /** UUID for each start. */
  @Deprecated public java.lang.String session;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ControlCenterMetrics() {}

  /**
   * All-args constructor.
   * @param timestamp Time when this data record was created.
   * @param confluentPlatformVersion The version of the Confluent Platform.
   * @param clusterId The cluster we are running on.
   * @param controlCenterInstance ID of Control Center.
   * @param session UUID for each start.
   */
  public ControlCenterMetrics(java.lang.Long timestamp, java.lang.String confluentPlatformVersion, java.lang.String clusterId, java.lang.String controlCenterInstance, java.lang.String session) {
    this.timestamp = timestamp;
    this.confluentPlatformVersion = confluentPlatformVersion;
    this.clusterId = clusterId;
    this.controlCenterInstance = controlCenterInstance;
    this.session = session;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return confluentPlatformVersion;
    case 2: return clusterId;
    case 3: return controlCenterInstance;
    case 4: return session;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: confluentPlatformVersion = (java.lang.String)value$; break;
    case 2: clusterId = (java.lang.String)value$; break;
    case 3: controlCenterInstance = (java.lang.String)value$; break;
    case 4: session = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Time when this data record was created.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Time when this data record was created.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'confluentPlatformVersion' field.
   * @return The version of the Confluent Platform.
   */
  public java.lang.String getConfluentPlatformVersion() {
    return confluentPlatformVersion;
  }


  /**
   * Sets the value of the 'confluentPlatformVersion' field.
   * The version of the Confluent Platform.
   * @param value the value to set.
   */
  public void setConfluentPlatformVersion(java.lang.String value) {
    this.confluentPlatformVersion = value;
  }

  /**
   * Gets the value of the 'clusterId' field.
   * @return The cluster we are running on.
   */
  public java.lang.String getClusterId() {
    return clusterId;
  }


  /**
   * Sets the value of the 'clusterId' field.
   * The cluster we are running on.
   * @param value the value to set.
   */
  public void setClusterId(java.lang.String value) {
    this.clusterId = value;
  }

  /**
   * Gets the value of the 'controlCenterInstance' field.
   * @return ID of Control Center.
   */
  public java.lang.String getControlCenterInstance() {
    return controlCenterInstance;
  }


  /**
   * Sets the value of the 'controlCenterInstance' field.
   * ID of Control Center.
   * @param value the value to set.
   */
  public void setControlCenterInstance(java.lang.String value) {
    this.controlCenterInstance = value;
  }

  /**
   * Gets the value of the 'session' field.
   * @return UUID for each start.
   */
  public java.lang.String getSession() {
    return session;
  }


  /**
   * Sets the value of the 'session' field.
   * UUID for each start.
   * @param value the value to set.
   */
  public void setSession(java.lang.String value) {
    this.session = value;
  }

  /**
   * Creates a new ControlCenterMetrics RecordBuilder.
   * @return A new ControlCenterMetrics RecordBuilder
   */
  public static io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder newBuilder() {
    return new io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder();
  }

  /**
   * Creates a new ControlCenterMetrics RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ControlCenterMetrics RecordBuilder
   */
  public static io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder newBuilder(io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder other) {
    if (other == null) {
      return new io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder();
    } else {
      return new io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder(other);
    }
  }

  /**
   * Creates a new ControlCenterMetrics RecordBuilder by copying an existing ControlCenterMetrics instance.
   * @param other The existing instance to copy.
   * @return A new ControlCenterMetrics RecordBuilder
   */
  public static io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder newBuilder(io.confluent.controlcenter.version.metrics.ControlCenterMetrics other) {
    if (other == null) {
      return new io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder();
    } else {
      return new io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder(other);
    }
  }

  /**
   * RecordBuilder for ControlCenterMetrics instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ControlCenterMetrics>
    implements org.apache.avro.data.RecordBuilder<ControlCenterMetrics> {

    /** Time when this data record was created. */
    private long timestamp;
    /** The version of the Confluent Platform. */
    private java.lang.String confluentPlatformVersion;
    /** The cluster we are running on. */
    private java.lang.String clusterId;
    /** ID of Control Center. */
    private java.lang.String controlCenterInstance;
    /** UUID for each start. */
    private java.lang.String session;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.confluentPlatformVersion)) {
        this.confluentPlatformVersion = data().deepCopy(fields()[1].schema(), other.confluentPlatformVersion);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.clusterId)) {
        this.clusterId = data().deepCopy(fields()[2].schema(), other.clusterId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.controlCenterInstance)) {
        this.controlCenterInstance = data().deepCopy(fields()[3].schema(), other.controlCenterInstance);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.session)) {
        this.session = data().deepCopy(fields()[4].schema(), other.session);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ControlCenterMetrics instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.controlcenter.version.metrics.ControlCenterMetrics other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.confluentPlatformVersion)) {
        this.confluentPlatformVersion = data().deepCopy(fields()[1].schema(), other.confluentPlatformVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.clusterId)) {
        this.clusterId = data().deepCopy(fields()[2].schema(), other.clusterId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.controlCenterInstance)) {
        this.controlCenterInstance = data().deepCopy(fields()[3].schema(), other.controlCenterInstance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.session)) {
        this.session = data().deepCopy(fields()[4].schema(), other.session);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Time when this data record was created.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Time when this data record was created.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Time when this data record was created.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Time when this data record was created.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'confluentPlatformVersion' field.
      * The version of the Confluent Platform.
      * @return The value.
      */
    public java.lang.String getConfluentPlatformVersion() {
      return confluentPlatformVersion;
    }


    /**
      * Sets the value of the 'confluentPlatformVersion' field.
      * The version of the Confluent Platform.
      * @param value The value of 'confluentPlatformVersion'.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder setConfluentPlatformVersion(java.lang.String value) {
      validate(fields()[1], value);
      this.confluentPlatformVersion = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'confluentPlatformVersion' field has been set.
      * The version of the Confluent Platform.
      * @return True if the 'confluentPlatformVersion' field has been set, false otherwise.
      */
    public boolean hasConfluentPlatformVersion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'confluentPlatformVersion' field.
      * The version of the Confluent Platform.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder clearConfluentPlatformVersion() {
      confluentPlatformVersion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'clusterId' field.
      * The cluster we are running on.
      * @return The value.
      */
    public java.lang.String getClusterId() {
      return clusterId;
    }


    /**
      * Sets the value of the 'clusterId' field.
      * The cluster we are running on.
      * @param value The value of 'clusterId'.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder setClusterId(java.lang.String value) {
      validate(fields()[2], value);
      this.clusterId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'clusterId' field has been set.
      * The cluster we are running on.
      * @return True if the 'clusterId' field has been set, false otherwise.
      */
    public boolean hasClusterId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'clusterId' field.
      * The cluster we are running on.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder clearClusterId() {
      clusterId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'controlCenterInstance' field.
      * ID of Control Center.
      * @return The value.
      */
    public java.lang.String getControlCenterInstance() {
      return controlCenterInstance;
    }


    /**
      * Sets the value of the 'controlCenterInstance' field.
      * ID of Control Center.
      * @param value The value of 'controlCenterInstance'.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder setControlCenterInstance(java.lang.String value) {
      validate(fields()[3], value);
      this.controlCenterInstance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'controlCenterInstance' field has been set.
      * ID of Control Center.
      * @return True if the 'controlCenterInstance' field has been set, false otherwise.
      */
    public boolean hasControlCenterInstance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'controlCenterInstance' field.
      * ID of Control Center.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder clearControlCenterInstance() {
      controlCenterInstance = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'session' field.
      * UUID for each start.
      * @return The value.
      */
    public java.lang.String getSession() {
      return session;
    }


    /**
      * Sets the value of the 'session' field.
      * UUID for each start.
      * @param value The value of 'session'.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder setSession(java.lang.String value) {
      validate(fields()[4], value);
      this.session = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'session' field has been set.
      * UUID for each start.
      * @return True if the 'session' field has been set, false otherwise.
      */
    public boolean hasSession() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'session' field.
      * UUID for each start.
      * @return This builder.
      */
    public io.confluent.controlcenter.version.metrics.ControlCenterMetrics.Builder clearSession() {
      session = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ControlCenterMetrics build() {
      try {
        ControlCenterMetrics record = new ControlCenterMetrics();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.confluentPlatformVersion = fieldSetFlags()[1] ? this.confluentPlatformVersion : (java.lang.String) defaultValue(fields()[1]);
        record.clusterId = fieldSetFlags()[2] ? this.clusterId : (java.lang.String) defaultValue(fields()[2]);
        record.controlCenterInstance = fieldSetFlags()[3] ? this.controlCenterInstance : (java.lang.String) defaultValue(fields()[3]);
        record.session = fieldSetFlags()[4] ? this.session : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ControlCenterMetrics>
    WRITER$ = (org.apache.avro.io.DatumWriter<ControlCenterMetrics>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ControlCenterMetrics>
    READER$ = (org.apache.avro.io.DatumReader<ControlCenterMetrics>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    if (this.confluentPlatformVersion == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.confluentPlatformVersion);
    }

    if (this.clusterId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.clusterId);
    }

    if (this.controlCenterInstance == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.controlCenterInstance);
    }

    if (this.session == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.session);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.confluentPlatformVersion = null;
      } else {
        this.confluentPlatformVersion = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.clusterId = null;
      } else {
        this.clusterId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.controlCenterInstance = null;
      } else {
        this.controlCenterInstance = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.session = null;
      } else {
        this.session = in.readString();
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.confluentPlatformVersion = null;
          } else {
            this.confluentPlatformVersion = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.clusterId = null;
          } else {
            this.clusterId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.controlCenterInstance = null;
          } else {
            this.controlCenterInstance = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.session = null;
          } else {
            this.session = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










